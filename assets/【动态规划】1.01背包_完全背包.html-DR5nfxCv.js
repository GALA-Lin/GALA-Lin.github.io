import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as p,o as t}from"./app-Dr_zCpAF.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="【动态规划】1-01背包-完全背包" tabindex="-1"><a class="header-anchor" href="#【动态规划】1-01背包-完全背包"><span>【动态规划】1.01背包&amp;完全背包</span></a></h1><h2 id="系列文章" tabindex="-1"><a class="header-anchor" href="#系列文章"><span>系列文章</span></a></h2><p><a href="https://blog.csdn.net/2302_79000266/article/details/144505896" target="_blank" rel="noopener noreferrer">【基础算法】1.排序及二分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144608856" target="_blank" rel="noopener noreferrer">【基础算法】2.高精度&amp;前缀和与差分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144634985" target="_blank" rel="noopener noreferrer">【基础算法】3.双指针、位运算、离散化、区间合并</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144653279" target="_blank" rel="noopener noreferrer">【数据结构】1.链表</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/145040073?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=145040073&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【基础算法】习题课1</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/146338225?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=146338225&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【动态规划】1.01背包&amp;完全背包</a></p><h2 id="系列代码" tabindex="-1"><a class="header-anchor" href="#系列代码"><span>系列代码</span></a></h2><p><a href="https://github.com/GALA-Lin/Algorithm" target="_blank" rel="noopener noreferrer">GALA-Lin/Algorithm: CSDN基础算法系列配套代码</a></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://www.acwing.com/" target="_blank" rel="noopener noreferrer">Acwing算法基础课</a></li><li><a href="https://www.hello-algo.com/" target="_blank" rel="noopener noreferrer">Hello Algorithm</a></li></ol><h1 id="一、01背包" tabindex="-1"><a class="header-anchor" href="#一、01背包"><span>一、01背包</span></a></h1><h3 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述"><span>问题描述</span></a></h3><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 v<sub>i</sub> ，价值是 w<sub>i</sub> 。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br> 输出最大价值。</p><h3 id="输入格式" tabindex="-1"><a class="header-anchor" href="#输入格式"><span>输入格式</span></a></h3><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 v<sub>i</sub> , w<sub>i</sub> ，用空格隔开，分别表示第 i 件物品的体积和价值。</p><h3 id="输出格式" tabindex="-1"><a class="header-anchor" href="#输出格式"><span>输出格式</span></a></h3><p>输出一个整数，表示最大价值。</p><h2 id="解法分析" tabindex="-1"><a class="header-anchor" href="#解法分析"><span>解法分析</span></a></h2><h3 id="二维dp" tabindex="-1"><a class="header-anchor" href="#二维dp"><span>二维DP</span></a></h3><ul><li><p>f[i,j] : 从前i个物品中选出体积&lt;=j的价值集合中的最大价值</p></li><li><p>状态计算（集合划分）:<br><img src="https://i-blog.csdnimg.cn/direct/b89ee4c231c64a5c832037478c586b07.png#pic_center" alt="" loading="lazy"></p></li><li><p>输出f[N,V]</p></li></ul><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="一维dp" tabindex="-1"><a class="header-anchor" href="#一维dp"><span>一维DP</span></a></h3><p>将状态<code>f[i][j]</code>优化到一维<code>f[j]</code>，实际上只需要做一个等价变形。</p><p>为什么可以这样变形呢？我们定义的状态<code>f[i][j]</code>可以求得任意合法的i与j最优解，但题目只需要求得最终状态<code>f[n][m]</code>，因此我们只需要一维的空间来更新状态。</p><p>（1）状态<code>f[j]</code>定义: N 件物品，背包容量 j 下的最优解。</p><p>（2）注意枚举背包容量 j 必须从 m 开始。</p><p>（3）为什么一维情况下枚举背包容量需要逆序？在二维情况下，状态<code>f[i][j]</code>是由上一轮<code>i - 1</code>的状态得来的，<code>f[i][j]</code>与<code>f[i - 1][j]</code>是独立的。而优化到一维后，如果我们还是正序，则有<code>f[较小体积]</code>更新到<code>f[较大体积]</code>，则有可能本应该用第<code>i-1</code>轮的状态却用的是第i轮的状态。</p><p>（4）例如，一维状态第i轮对体积为3的物品进行决策，则<code>f[7]</code>由<code>f[4]</code>更新而来，这里的<code>f[4]</code>正确应该是<code>f[i - 1][4]</code>，但从小到大枚举j这里的<code>f[4]</code>在第 i 轮计算却变成了<code>f[i][4]</code>。当逆序枚举背包容量 j 时，我们求<code>f[7]</code>同样由<code>f[4]</code>更新，但由于是逆序，这里的<code>f[4]</code>还没有在第 i 轮计算，所以此时实际计算的<code>f[4]</code>仍然是<code>f[i - 1][4]</code>。</p><p>（5）简单来说，一维情况正序更新状态f[j]需要用到前面计算的状态已经被「污染」，逆序则不会有这样的问题。</p><p>状态转移方程为：<code>f[j] = max(f[j], f[j - v[i]] + w[i]</code> 。</p><blockquote><p>作者：深蓝<br> 链接：<a href="https://www.acwing.com/solution/content/1374/" target="_blank" rel="noopener noreferrer">https://www.acwing.com/solution/content/1374/</a><br> 来源：AcWing<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token keyword">int</span> state<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> N<span class="token punctuation">,</span>V<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">,</span><span class="token operator">&amp;</span>V<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">int</span> j<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>V<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//上表中从右向左</span></span>
<span class="line">            state<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">MAX</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>state<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>state<span class="token punctuation">[</span>V<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h1 id="二、完全背包" tabindex="-1"><a class="header-anchor" href="#二、完全背包"><span>二、完全背包</span></a></h1><h3 id="问题描述-1" tabindex="-1"><a class="header-anchor" href="#问题描述-1"><span>问题描述</span></a></h3><p>有 N 件物品和一个容量是 V 的背包。每件物品使用次数不限。</p><p>第 i 件物品的体积是 v<sub>i</sub> ，价值是 w<sub>i</sub> 。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br> 输出最大价值。</p><h3 id="输入格式-1" tabindex="-1"><a class="header-anchor" href="#输入格式-1"><span>输入格式</span></a></h3><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N 行，每行两个整数 v<sub>i</sub> , w<sub>i</sub> ，用空格隔开，分别表示第 i 件物品的体积和价值。</p><h3 id="输出格式-1" tabindex="-1"><a class="header-anchor" href="#输出格式-1"><span>输出格式</span></a></h3><p>输出一个整数，表示最大价值。</p><h2 id="解法分析-1" tabindex="-1"><a class="header-anchor" href="#解法分析-1"><span>解法分析</span></a></h2><h3 id="一维dp-1" tabindex="-1"><a class="header-anchor" href="#一维dp-1"><span>一维DP</span></a></h3><p><strong>状态转移方程:</strong> <code>dp[j]=max(dp[j],dp[j-v[i]]+w[i]);</code><br><code>j=v[i]</code>从第一种物品开始，保留<code>dp[j]</code>和<code>上一次dp+下一种物品的价值</code>中较大的那个</p><p>即：对于每一个可能的容量<code>j</code>，它要么不选择当前物品<code>i</code>（此时状态值保持不变，即<code>dp[j]</code>），要么选择当前物品<code>i</code>（此时状态值变为<code>dp[j-v[i]]+w[i]</code>，即不选择当前物品时容量为<code>j-v[i]</code>时的最大价值加上当前物品的价值）。通过max函数保留其中的最大值，即在容量为j时能够获得的最大价值。</p><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> N<span class="token punctuation">,</span>M<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cin<span class="token operator">&gt;&gt;</span>N<span class="token operator">&gt;&gt;</span>M<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    cout<span class="token operator">&lt;&lt;</span>dp<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,52)]))}const u=s(e,[["render",o]]),r=JSON.parse('{"path":"/zh/Algo_note/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%911.01%E8%83%8C%E5%8C%85_%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html","title":"【动态规划】1.01背包&完全背包","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","cover":"https://img.picui.cn/free/2025/06/15/684eb82931fbc.jpg","category":["基础算法学习笔记"],"tag":["动态规划","01背包","完全背包"],"description":"【动态规划】1.01背包&完全背包 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 【动态规划】1.01背包&完全背包 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 参考资料 Acwing算法基础课...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【动态规划】1.01背包&完全背包\\",\\"image\\":[\\"https://i-blog.csdnimg.cn/direct/b89ee4c231c64a5c832037478c586b07.png#pic_center\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-17T15:15:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GALA-Lin\\",\\"url\\":\\"https://gala-lin.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://gala-lin.github.io/zh/Algo_note/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%911.01%E8%83%8C%E5%8C%85_%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"22lin0415"}],["meta",{"property":"og:title","content":"【动态规划】1.01背包&完全背包"}],["meta",{"property":"og:description","content":"【动态规划】1.01背包&完全背包 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 【动态规划】1.01背包&完全背包 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 参考资料 Acwing算法基础课..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-06-17T15:15:17.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://img.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"name":"twitter:image:alt","content":"【动态规划】1.01背包&完全背包"}],["meta",{"property":"article:tag","content":"完全背包"}],["meta",{"property":"article:tag","content":"01背包"}],["meta",{"property":"article:tag","content":"动态规划"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T15:15:17.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://gala-lin.github.io/Algo_note/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%911.01%E8%83%8C%E5%8C%85_%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85.html"}]]},"git":{"createdTime":1750082388000,"updatedTime":1750173317000,"contributors":[{"name":"Linsen HU","username":"","email":"1563883475@qq.com","commits":2}]},"readingTime":{"minutes":4.96,"words":1487},"filePathRelative":"zh/Algo_note/【动态规划】1.01背包&完全背包.md","excerpt":"\\n<h2>系列文章</h2>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144505896\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】1.排序及二分</a></p>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144608856\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】2.高精度&amp;前缀和与差分</a></p>","autoDesc":true}');export{u as comp,r as data};
