import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as s,o as t}from"./app-DDidrX60.js";const r={};function i(l,e){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="【动态规划】1-线性dp" tabindex="-1"><a class="header-anchor" href="#【动态规划】1-线性dp"><span>【动态规划】1.线性DP</span></a></h1><h2 id="系列文章" tabindex="-1"><a class="header-anchor" href="#系列文章"><span>系列文章</span></a></h2><p><a href="https://blog.csdn.net/2302_79000266/article/details/144505896" target="_blank" rel="noopener noreferrer">【基础算法】1.排序及二分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144608856" target="_blank" rel="noopener noreferrer">【基础算法】2.高精度&amp;前缀和与差分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144634985" target="_blank" rel="noopener noreferrer">【基础算法】3.双指针、位运算、离散化、区间合并</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144653279" target="_blank" rel="noopener noreferrer">【数据结构】1.链表</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/145040073?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=145040073&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【基础算法】习题课1</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/146338225?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=146338225&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【动态规划】1.01背包&amp;完全背包</a></p><h2 id="系列代码" tabindex="-1"><a class="header-anchor" href="#系列代码"><span>系列代码</span></a></h2><p><a href="https://github.com/GALA-Lin/Algorithm" target="_blank" rel="noopener noreferrer">GALA-Lin/Algorithm: CSDN基础算法系列配套代码</a></p><h2 id="线性dp" tabindex="-1"><a class="header-anchor" href="#线性dp"><span>线性DP</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>线性DP（Linear DP）是指在一维数组上进行的动态规划，即数组的每个元素只与前一个元素有关，而与其他元素无关。</p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例</span></a></h3><h4 id="_1-最大子序和" tabindex="-1"><a class="header-anchor" href="#_1-最大子序和"><span>1. 最大子序和</span></a></h4><p>给定一个整数数组，求该数组的最大子序和。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span>
<span class="line">输出：6</span>
<span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-最大子数组和" tabindex="-1"><a class="header-anchor" href="#_2-最大子数组和"><span>2. 最大子数组和</span></a></h4><p>给定一个整数数组，求该数组的最大子数组和。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span>
<span class="line">输出：7</span>
<span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 7。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-最大子矩阵和" tabindex="-1"><a class="header-anchor" href="#_3-最大子矩阵和"><span>3. 最大子矩阵和</span></a></h4><p>给定一个整数矩阵，求该矩阵的最大子矩阵和。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入：matrix = [[1,0,-1],[2,-1,3],[-1,2,-1]]</span>
<span class="line">输出：3</span>
<span class="line">解释：子矩阵 [[2,-1,3],[-1,2,-1]] 的和最大，为 3。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-最大子矩阵和-ii" tabindex="-1"><a class="header-anchor" href="#_4-最大子矩阵和-ii"><span>4. 最大子矩阵和 II</span></a></h4><p>给定一个整数矩阵，求该矩阵的最大子矩阵和，且该子矩阵必须是连续的。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入：matrix = [[1,0,-1],[2,-1,3],[-1,2,-1]]</span>
<span class="line">输出：2</span>
<span class="line">解释：子矩阵 [[1,0,-1],[2,-1,3]] 的和最大，为 2。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-最大子矩阵和-iii" tabindex="-1"><a class="header-anchor" href="#_5-最大子矩阵和-iii"><span>5. 最大子矩阵和 III</span></a></h4><p>给定一个整数矩阵，求该矩阵的最大子矩阵和，且该子矩阵必须是不重叠的。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">输入：matrix = [[1,0,-1],[2,-1,3],[-1,2,-1]]</span>
<span class="line">输出：4</span>
<span class="line">解释：子矩阵 [[1,0],[-1,2]] 和 [[2,-1,3]] 的和最大，为 4。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度"><span>时间复杂度</span></a></h3><p>线性DP问题的时间复杂度都为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为数组的长度。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://www.acwing.com/" target="_blank" rel="noopener noreferrer">Acwing算法基础课</a></li><li><a href="https://www.hello-algo.com/" target="_blank" rel="noopener noreferrer">Hello Algorithm</a></li></ol>`,33)]))}const c=a(r,[["render",i]]),d=JSON.parse('{"path":"/zh/Algo_note/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%911.%E7%BA%BF%E6%80%A7DP.html","title":"【动态规划】1.线性DP","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","cover":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg","category":["基础算法学习笔记"],"tag":["动态规划"],"description":"【动态规划】1.线性DP 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 【动态规划】1.01背包&完全背包 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 线性DP 定义 线性DP（Linear D...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【动态规划】1.线性DP\\",\\"image\\":[\\"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-30T11:15:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GALA-Lin\\",\\"url\\":\\"https://gala-lin.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://gala-lin.github.io/zh/Algo_note/%E3%80%90%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E3%80%911.%E7%BA%BF%E6%80%A7DP.html"}],["meta",{"property":"og:site_name","content":"22lin04"}],["meta",{"property":"og:title","content":"【动态规划】1.线性DP"}],["meta",{"property":"og:description","content":"【动态规划】1.线性DP 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 【动态规划】1.01背包&完全背包 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 线性DP 定义 线性DP（Linear D..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-30T11:15:03.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"name":"twitter:image:alt","content":"【动态规划】1.线性DP"}],["meta",{"property":"article:tag","content":"动态规划"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-30T11:15:03.000Z"}]]},"git":{"createdTime":1756552503000,"updatedTime":1756552503000,"contributors":[{"name":"Linsen HU","username":"","email":"1563883475@qq.com","commits":1}]},"readingTime":{"minutes":1.92,"words":576},"filePathRelative":"zh/Algo_note/【动态规划】1.线性DP.md","excerpt":"\\n<h2>系列文章</h2>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144505896\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】1.排序及二分</a></p>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144608856\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】2.高精度&amp;前缀和与差分</a></p>","autoDesc":true}');export{c as comp,d as data};
