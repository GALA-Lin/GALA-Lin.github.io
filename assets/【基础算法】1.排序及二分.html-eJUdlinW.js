import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as p}from"./app-ChZCZGkw.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="【基础算法】1-排序及二分" tabindex="-1"><a class="header-anchor" href="#【基础算法】1-排序及二分"><span>【基础算法】1.排序及二分</span></a></h1><p>[toc]</p><h2 id="系列文章" tabindex="-1"><a class="header-anchor" href="#系列文章"><span>系列文章</span></a></h2><p><a href="https://blog.csdn.net/2302_79000266/article/details/144505896" target="_blank" rel="noopener noreferrer">【基础算法】1.排序及二分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144608856" target="_blank" rel="noopener noreferrer">【基础算法】2.高精度&amp;前缀和与差分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144634985" target="_blank" rel="noopener noreferrer">【基础算法】3.双指针、位运算、离散化、区间合并</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144653279" target="_blank" rel="noopener noreferrer">【数据结构】1.链表</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/145040073?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=145040073&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【基础算法】习题课1</a></p><h2 id="系列代码" tabindex="-1"><a class="header-anchor" href="#系列代码"><span>系列代码</span></a></h2><p><a href="https://github.com/GALA-Lin/Algorithm" target="_blank" rel="noopener noreferrer">GALA-Lin/Algorithm: CSDN基础算法系列配套代码</a></p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://www.acwing.com/" target="_blank" rel="noopener noreferrer">Acwing算法基础课</a></li><li><a href="https://www.hello-algo.com/" target="_blank" rel="noopener noreferrer">Hello Algorithm</a></li></ol><h1 id="一、排序" tabindex="-1"><a class="header-anchor" href="#一、排序"><span>一、排序</span></a></h1><h2 id="_1-1-快速排序" tabindex="-1"><a class="header-anchor" href="#_1-1-快速排序"><span>1.1 快速排序</span></a></h2><h3 id="_1-1-1-算法流程" tabindex="-1"><a class="header-anchor" href="#_1-1-1-算法流程"><span>1.1.1 算法流程</span></a></h3><p>将比基准大的数放在基准右边；比基准小的放在基准左边</p><ol><li>选取数组最左端元素作为基准数，初始化两个指针 <code>i</code> 和 <code>j</code> 分别指向数组的两端。</li><li>设置一个循环，在每轮中使用 <code>i</code>（<code>j</code>）分别寻找第一个比基准数大（小）的元素，然后交换这两个元素。</li><li>循环执行步骤 <code>2</code> ，直到 <code>i</code> 和 <code>j</code> 相遇时停止，最后将基准数交换至两个子数组的分界线。</li></ol><p>例如：</p><p><img src="https://i-blog.csdnimg.cn/img_convert/32bd7caddb24d507812c6727cbe9e409.png" alt="基准划分步骤" loading="lazy"><img src="https://i-blog.csdnimg.cn/img_convert/32fda842a9b073180c070beef055e337.png" alt="基准划分步骤" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/f8519928e4864fa08f7859fee83049ca.png" alt="在这里插入图片描述" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/9088d8a308074949a54d6e19ca331a85.png" alt="在这里插入图片描述" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/b9786de0af174d2699f8ff300fccb0b9.png" alt="在这里插入图片描述" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/49a9ad726c6e4e4ca9519b201dd02b23.png" alt="在这里插入图片描述" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/91449e2f4a3043a1b69c57637cd2aef9.png" alt="在这里插入图片描述" loading="lazy"><img src="https://i-blog.csdnimg.cn/direct/110c949efe1e46588ea6904cd9242af7.png" alt="在这里插入图片描述" loading="lazy"><br><img src="https://i-blog.csdnimg.cn/direct/4636d646da61435f86ad7fd0ceb23e7e.png" alt="在这里插入图片描述" loading="lazy"></p><p>流程如下：<br><img src="https://i-blog.csdnimg.cn/img_convert/1b5ff1b2de2ece35d444e1a87ca3ebd7.png#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_1-1-2-示例代码" tabindex="-1"><a class="header-anchor" href="#_1-1-2-示例代码"><span>1.1.2 示例代码</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">void</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> q<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">do</span> i <span class="token operator">++</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">do</span> j <span class="token operator">--</span> <span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>作者：yxc<br> 链接：<a href="https://www.acwing.com/blog/content/277/" target="_blank" rel="noopener noreferrer">https://www.acwing.com/blog/content/277/</a><br> 来源：AcWing<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h3 id="_1-1-3-例题" tabindex="-1"><a class="header-anchor" href="#_1-1-3-例题"><span>1.1.3 例题</span></a></h3><ol><li><a href="http://poj.org/problem?id=2388" target="_blank" rel="noopener noreferrer">poj:2388 -- Who&#39;s in the Middle</a></li><li><a href="https://www.lanqiao.cn/problems/3225/learning/" target="_blank" rel="noopener noreferrer">宝藏排序Ⅰ - 蓝桥云课</a></li></ol><h2 id="_1-2-归并排序" tabindex="-1"><a class="header-anchor" href="#_1-2-归并排序"><span>1.2 归并排序</span></a></h2><p>![在这里插入图片描述](<a href="https://i-blog.csdnimg.cn/direct/e185e3e9b70e4a52ac6c7f91e3724678.png#pic_center" target="_blank" rel="noopener noreferrer">https://i-blog.csdnimg.cn/direct/e185e3e9b70e4a52ac6c7f91e3724678.png#pic_center</a> =x220)<br> 观察发现，归并排序与二叉树后序遍历的递归顺序是一致的。</p><ul><li>后序遍历：先递归左子树，再递归右子树，最后处理根节点。</li><li>归并排序：先递归左子数组，再递归右子数组，最后处理合并。</li></ul><h3 id="_1-2-1-算法流程" tabindex="-1"><a class="header-anchor" href="#_1-2-1-算法流程"><span>1.2.1 算法流程</span></a></h3><p>![在这里插入图片描述](<a href="https://i-blog.csdnimg.cn/direct/3588b2937b8c4fd19dca01c226075c7f.png#pic_center" target="_blank" rel="noopener noreferrer">https://i-blog.csdnimg.cn/direct/3588b2937b8c4fd19dca01c226075c7f.png#pic_center</a> =x256)</p><h3 id="_1-2-2-示例代码" tabindex="-1"><a class="header-anchor" href="#_1-2-2-示例代码"><span>1.2.2 示例代码</span></a></h3><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token comment">/* 合并左子数组和右子数组 */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 左子数组区间为 [left, mid], 右子数组区间为 [mid+1, right]</span></span>
<span class="line">    <span class="token comment">// 创建一个临时数组 tmp ，用于存放合并后的结果</span></span>
<span class="line">    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 初始化左子数组和右子数组的起始索引</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 当左右子数组都还有元素时，进行比较并将较小的元素复制到临时数组中</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将左子数组和右子数组的剩余元素复制到临时数组中</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将临时数组 tmp 中的元素复制回原数组 nums 的对应区间</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        nums<span class="token punctuation">[</span>left <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* 归并排序 */</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 终止条件</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 当子数组长度为 1 时终止递归</span></span>
<span class="line">    <span class="token comment">// 划分阶段</span></span>
<span class="line">    <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 计算中点</span></span>
<span class="line">    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 递归左子数组</span></span>
<span class="line">    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归右子数组</span></span>
<span class="line">    <span class="token comment">// 合并阶段</span></span>
<span class="line">    <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-2-3-例题" tabindex="-1"><a class="header-anchor" href="#_1-2-3-例题"><span>1.2.3 例题</span></a></h3><ol><li><a href="https://www.lanqiao.cn/problems/300/learning/" target="_blank" rel="noopener noreferrer">实现归并排序 - 蓝桥云课</a></li><li><a href="https://www.acwing.com/problem/content/description/61/" target="_blank" rel="noopener noreferrer">65. 数组中的逆序对 - AcWing题库</a></li><li><a href="https://acm.hdu.edu.cn/showproblem.php?pid=4911" target="_blank" rel="noopener noreferrer">hdu:Problem - 4911</a></li></ol><h2 id="_1-3-小结" tabindex="-1"><a class="header-anchor" href="#_1-3-小结"><span>1.3 小结</span></a></h2><p>快速排序与归并排序均采用分治思想<br><strong>快速排序：</strong></p><ol><li><p><strong>选择基准</strong>：从数组中选择一个元素作为基准（pivot）。例如，数组的第一个元素 <code>arr[left]</code>，或者<code>arr[(left+right)/2]</code>。</p></li><li><p><strong>分区操作</strong>：将大于/等于（小于/等于）基准的值放在一边，小于/等于（大于/等于）基准的放在另外一边。在基准两边设置两个指针 <code>i</code> 和 <code>j</code>，<code>i</code> 从左向右扫描找到大于基准的元素，<code>j</code> 从右向左扫描找到小于基准的元素，然后交换这两个元素的位置。这个过程一直重复直到 <code>i</code> 和 <code>j</code> 相遇。</p></li><li><p><strong>交换基准</strong>：当 <code>i</code> 和 <code>j</code> 相遇后，将基准元素与 <code>j</code> 指针所指向的元素交换，这样基准元素就被放置在了正确的位置上。</p></li><li><p><strong>递归排序</strong>：当<code>left</code>大于或等于<code>right</code>时，递归结束，即子数组的长度为0或1，这时数组已经被排序。</p></li></ol><p><strong>归并排序：</strong></p><ol><li><strong>分解</strong>：将数组分成两个子数组，递归地对每个子数组进行排序。分解的终止条件是子数组的长度为1，因为长度为1的数组必然是有序的。</li><li><strong>合并</strong>：将两个排序好的子数组合并成一个有序的数组。合并的过程是将两个子数组中的元素按顺序复制到一个临时数组中，然后将临时数组中的元素复制回原数组的对应位置。</li></ol><h1 id="二、二分" tabindex="-1"><a class="header-anchor" href="#二、二分"><span>二、二分</span></a></h1><h2 id="_2-1-整数二分" tabindex="-1"><a class="header-anchor" href="#_2-1-整数二分"><span>2.1 整数二分</span></a></h2><h3 id="_2-1-1-示例代码" tabindex="-1"><a class="header-anchor" href="#_2-1-1-示例代码"><span>2.1.1 示例代码</span></a></h3><p>整数二分算法模板 —— <a href="https://www.acwing.com/problem/content/791/" target="_blank" rel="noopener noreferrer">模板题 AcWing 789. 数的范围</a></p><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span> <span class="token comment">// 检查x是否满足某种性质</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">bsearch_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token comment">// check()判断mid是否满足性质</span></span>
<span class="line">        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> l<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">bsearch_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> l<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>作者：yxc<br> 链接：<a href="https://www.acwing.com/blog/content/277/" target="_blank" rel="noopener noreferrer">https://www.acwing.com/blog/content/277/</a><br> 来源：AcWing<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></div><h3 id="_2-1-2-例题" tabindex="-1"><a class="header-anchor" href="#_2-1-2-例题"><span>2.1.2 例题</span></a></h3><p><a href="https://www.luogu.com.cn/problem/P2249" target="_blank" rel="noopener noreferrer">P2249 【深基13.例1】查找 - 洛谷 </a>（哈希）</p><p><a href="https://www.luogu.com.cn/problem/P1102" target="_blank" rel="noopener noreferrer">P1102 A-B 数对 - 洛谷 </a></p><p><a href="https://www.lanqiao.cn/problems/99/learning/" target="_blank" rel="noopener noreferrer">18.分巧克力 - 蓝桥云课</a></p><h2 id="_2-2-浮点数二分" tabindex="-1"><a class="header-anchor" href="#_2-2-浮点数二分"><span>2.2 浮点数二分</span></a></h2><h3 id="_2-2-1-示例代码" tabindex="-1"><a class="header-anchor" href="#_2-2-1-示例代码"><span>2.2.1 示例代码</span></a></h3><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span> <span class="token comment">// 检查x是否满足某种性质</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">double</span> <span class="token function">bsearch_3</span><span class="token punctuation">(</span><span class="token keyword">double</span> l<span class="token punctuation">,</span> <span class="token keyword">double</span> r<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token keyword">double</span> eps <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span>   <span class="token comment">// eps 表示精度，取决于题目对精度的要求</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">&gt;</span> eps<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> l<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>作者：yxc<br> 链接：<a href="https://www.acwing.com/blog/content/277/" target="_blank" rel="noopener noreferrer">https://www.acwing.com/blog/content/277/</a><br> 来源：AcWing<br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></div><h3 id="_2-2-2-例题" tabindex="-1"><a class="header-anchor" href="#_2-2-2-例题"><span>2.2.2 例题</span></a></h3><p><a href="https://www.luogu.com.cn/problem/P1024" target="_blank" rel="noopener noreferrer">P1024 [NOIP2001] 提高组 一元三次方程求解 - 洛谷</a><br><a href="https://blog.csdn.net/weixin_44091134/article/details/116748883" target="_blank" rel="noopener noreferrer">第十二届蓝桥杯B组C/C++省赛—H题（杨辉三角）博客</a></p>`,55)]))}const r=s(t,[["render",o]]),u=JSON.parse('{"path":"/Algo_note/%E3%80%90%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E3%80%911.%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BA%8C%E5%88%86.html","title":"【基础算法】1.排序及二分","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","cover":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg","footer":"<a href=https://www.gnu.org/licenses/gpl-3.0.html style=\\"color:#808080\\"> GPL-3.0 Licensed </a> | Copyright © 2025-present <a href=\\"https://github.com/GALA-Lin\\" style=\\"color:#808080\\">GALA-Lin</a>","copyright":false,"category":["基础算法学习笔记"],"tag":["排序","二分"],"description":"【基础算法】1.排序及二分 [toc] 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 参考资料 Acwing算法基础课 Hello Algorithm...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【基础算法】1.排序及二分\\",\\"image\\":[\\"https://i-blog.csdnimg.cn/img_convert/32bd7caddb24d507812c6727cbe9e409.png\\",\\"https://i-blog.csdnimg.cn/img_convert/32fda842a9b073180c070beef055e337.png \\",\\"https://i-blog.csdnimg.cn/direct/f8519928e4864fa08f7859fee83049ca.png\\",\\"https://i-blog.csdnimg.cn/direct/9088d8a308074949a54d6e19ca331a85.png\\",\\"https://i-blog.csdnimg.cn/direct/b9786de0af174d2699f8ff300fccb0b9.png \\",\\"https://i-blog.csdnimg.cn/direct/49a9ad726c6e4e4ca9519b201dd02b23.png\\",\\"https://i-blog.csdnimg.cn/direct/91449e2f4a3043a1b69c57637cd2aef9.png\\",\\"https://i-blog.csdnimg.cn/direct/110c949efe1e46588ea6904cd9242af7.png\\",\\"https://i-blog.csdnimg.cn/direct/4636d646da61435f86ad7fd0ceb23e7e.png\\",\\"https://i-blog.csdnimg.cn/img_convert/1b5ff1b2de2ece35d444e1a87ca3ebd7.png#pic_center \\",\\"https://i-blog.csdnimg.cn/direct/e185e3e9b70e4a52ac6c7f91e3724678.png#pic_center =x220\\",\\"https://i-blog.csdnimg.cn/direct/3588b2937b8c4fd19dca01c226075c7f.png#pic_center =x256\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-20T13:16:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GALA-Lin\\",\\"url\\":\\"https://gala-lin.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://gala-lin.github.io/Algo_note/%E3%80%90%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E3%80%911.%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BA%8C%E5%88%86.html"}],["meta",{"property":"og:site_name","content":"22lin04"}],["meta",{"property":"og:title","content":"【基础算法】1.排序及二分"}],["meta",{"property":"og:description","content":"【基础算法】1.排序及二分 [toc] 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 参考资料 Acwing算法基础课 Hello Algorithm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-20T13:16:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"name":"twitter:image:alt","content":"【基础算法】1.排序及二分"}],["meta",{"property":"article:tag","content":"二分"}],["meta",{"property":"article:tag","content":"排序"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-20T13:16:13.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://gala-lin.github.io/zh/Algo_note/%E3%80%90%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E3%80%911.%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BA%8C%E5%88%86.html"}]]},"git":{"createdTime":1750082388000,"updatedTime":1753017373000,"contributors":[{"name":"Linsen HU","username":"","email":"1563883475@qq.com","commits":2},{"name":"GALA-Lin","username":"GALA-Lin","email":"140772868+GALA-Lin@users.noreply.github.com","commits":1,"url":"https://github.com/GALA-Lin"}]},"readingTime":{"minutes":6.12,"words":1836},"filePathRelative":"Algo_note/【基础算法】1.排序及二分.md","excerpt":"\\n<p>[toc]</p>\\n<h2>系列文章</h2>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144505896\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】1.排序及二分</a></p>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144608856\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】2.高精度&amp;前缀和与差分</a></p>","autoDesc":true}');export{r as comp,u as data};
