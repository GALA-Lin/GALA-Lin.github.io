import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as p,o as e}from"./app-xf-WPR5E.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="【基础算法】2-二分与前缀和习题" tabindex="-1"><a class="header-anchor" href="#【基础算法】2-二分与前缀和习题"><span>【基础算法】2.二分与前缀和习题</span></a></h1><p>[toc]</p><h2 id="系列文章" tabindex="-1"><a class="header-anchor" href="#系列文章"><span>系列文章</span></a></h2><p><a href="https://blog.csdn.net/2302_79000266/article/details/144505896" target="_blank" rel="noopener noreferrer">【基础算法】1.排序及二分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144608856" target="_blank" rel="noopener noreferrer">【基础算法】2.高精度&amp;前缀和与差分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144634985" target="_blank" rel="noopener noreferrer">【基础算法】3.双指针、位运算、离散化、区间合并</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144653279" target="_blank" rel="noopener noreferrer">【数据结构】1.链表</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/145040073?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=145040073&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【基础算法】习题课1</a></p><h2 id="系列代码" tabindex="-1"><a class="header-anchor" href="#系列代码"><span>系列代码</span></a></h2><p><a href="https://github.com/GALA-Lin/Algorithm" target="_blank" rel="noopener noreferrer">GALA-Lin/Algorithm: CSDN基础算法系列配套代码</a></p><h1 id="_730-机器人跳跃问题-acwing题库" tabindex="-1"><a class="header-anchor" href="#_730-机器人跳跃问题-acwing题库"><span><a href="https://www.acwing.com/problem/content/732/" target="_blank" rel="noopener noreferrer">730. 机器人跳跃问题 - AcWing题库</a></span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2><p>机器人正在玩一个古老的基于 DOS 的游戏。</p><p>游戏中有 N+1座建筑——从 0 到 N 编号，从左到右排列。</p><p>编号为 0 的建筑高度为 0 个单位，编号为 i 的建筑高度为 H(i) 个单位。</p><p>起初，机器人在编号为 0 的建筑处。</p><p>每一步，它跳到下一个（右边）建筑。</p><p>假设机器人在第 k 个建筑，且它现在的能量值是 EE，下一步它将跳到第 k+1 个建筑。</p><p>如果 H(k+1)&gt;E，那么机器人就失去H(k+1)−E 的能量值，否则它将得到 E−H(k+1)的能量值。</p><p>游戏目标是到达第 N 个建筑，在这个过程中能量值不能为负数个单位。</p><p>现在的问题是机器人至少以多少能量值开始游戏，才可以保证成功完成游戏？</p><h4 id="输入格式" tabindex="-1"><a class="header-anchor" href="#输入格式"><span>输入格式</span></a></h4><p>第一行输入整数 N。</p><p>第二行是 N 个空格分隔的整数，H(1),H(2),…,H(N)H(1),H(2),…,H(N) 代表建筑物的高度。</p><h4 id="输出格式" tabindex="-1"><a class="header-anchor" href="#输出格式"><span>输出格式</span></a></h4><p>输出一个整数，表示所需的最少单位的初始能量值上取整后的结果。</p><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h2><p><strong>（寻求最小/大普遍二分、贪心、搜索、DP）</strong></p><h3 id="_1-递推" tabindex="-1"><a class="header-anchor" href="#_1-递推"><span>1.递推</span></a></h3><ul><li><code>H(k+1)&gt;E</code>,<code>E-H(k+1)−E = 2E-H(k+1)</code></li><li><code>H(k+1)&lt;=E</code>,<code>E+E-H(k+1) = 2E-H(k+1)</code></li></ul><p>如果设机器人初始能量值 E0 为 x ，则 E1 = 2E0 - H(1) = 2x - H(1) ;</p><p>E2 = 4x - 2H1 -H2 ; E3 = 8x - 4H1 -2H2 -H3 ......</p><p>让每个 Ei &gt; 0 ,然后得到一系列方程把 x 求解出来</p><p>所以有<code>x&gt;=H1/2+H2/4+H3/8+...+Hn/2^n</code></p><h3 id="_2-二分" tabindex="-1"><a class="header-anchor" href="#_2-二分"><span>2.二分</span></a></h3><p><strong>二分条件：</strong></p><ul><li><strong>二段性：<strong>指一个问题可以被划分为</strong>连续的两部分</strong>，其中一部分满足某个特定条件，而另一部分不满足。这种性质使得二分算法能够通过每次排除一半的搜索空间，快速定位到目标值或分界点。</li><li>**单调性：**如果 x 满足条件，那么所有大于 x 的肯定也满足条件；如果 x不满足条件，那么所有小于 x的肯定也不满足条件</li></ul><p>单调性包含于二段性，单调毕可二分，反之不一定。</p><p><strong>check()</strong>：</p><p>由单调性可知：</p><p><code>if(check(mid))</code>，那么x肯定mid及其右边部分都可以，为求最小值，使<code>r=mid</code>,查找&lt;=mid的符合条件的值；</p><p><code>else</code>，那么x肯定&gt;mid，使<code>l=mid+1</code>，查找&gt;mid的符合条件的值。</p><figure><img src="https://i-blog.csdnimg.cn/direct/ca0cbd08209a4c5495110ed254dcaee0.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h3 id="_3-逆推" tabindex="-1"><a class="header-anchor" href="#_3-逆推"><span>3.逆推</span></a></h3><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code"><span>CODE</span></a></h2><h3 id="_1-递推-1" tabindex="-1"><a class="header-anchor" href="#_1-递推-1"><span>1.递推</span></a></h3><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">double</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放2的次幂</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//2^0=1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        res <span class="token operator">+=</span> <span class="token number">1.0</span> <span class="token operator">/</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token function">ceil</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">作者：Snowing</span>
<span class="line">链接：https<span class="token operator">:</span><span class="token comment">//www.acwing.com/solution/content/90581/</span></span>
<span class="line">来源：AcWing</span>
<span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-二分-1" tabindex="-1"><a class="header-anchor" href="#_2-二分-1"><span>2.二分</span></a></h3><h3 id="_3-逆推-1" tabindex="-1"><a class="header-anchor" href="#_3-逆推-1"><span>3.逆推</span></a></h3><h1 id="_99-激光炸弹-acwing题库" tabindex="-1"><a class="header-anchor" href="#_99-激光炸弹-acwing题库"><span><a href="https://www.acwing.com/problem/content/101/" target="_blank" rel="noopener noreferrer">99. 激光炸弹 - AcWing题库</a></span></a></h1><h2 id="题目描述-1" tabindex="-1"><a class="header-anchor" href="#题目描述-1"><span>题目描述</span></a></h2><p>地图上有<code>N</code>个目标点，用整数<code>Xi,Yi</code>表示目标在地图上的位置，每个目标都有一个价值<code>Wi</code>。<br> 注意：不同目标可能在同一位置。<br> 现在有一种新型的激光炸弹，可以摧毁一个包含<code>R×R</code>个位置的正方形内的所有目标。</p><p>激光炸弹的投放是通过卫星定位的，但其有一个缺点，就是其爆炸范围，即那个正方形的边必须和<code>x</code>,<code>y</code>轴平行。</p><p>求一颗炸弹最多能炸掉地图上总价值为多少的目标。</p><h3 id="输入格式-1" tabindex="-1"><a class="header-anchor" href="#输入格式-1"><span>输入格式</span></a></h3><p>第一行输入正整数<code>N</code>和<code>R</code>，分别代表地图上的目标数目和正方形包含的横纵位置数量，数据用空格隔开。</p><p>接下来<code>N</code>行，每行输入一组数据，每组数据包括三个整数<code>Xi,Yi,Wi</code>，分别代表目标的<code>x</code> 坐标，<code>y</code>坐标和价值，数据用空格隔开。</p><h3 id="输出格式-1" tabindex="-1"><a class="header-anchor" href="#输出格式-1"><span>输出格式</span></a></h3><p>输出一个正整数，代表一颗炸弹最多能炸掉地图上目标的总价值数目。</p><h3 id="数据范围" tabindex="-1"><a class="header-anchor" href="#数据范围"><span>数据范围</span></a></h3><p>0≤R≤10^9<br> 0&lt;N≤10000<br> 0≤Xi,Yi≤5000<br> 0≤Wi≤1000</p><h2 id="解题思路-1" tabindex="-1"><a class="header-anchor" href="#解题思路-1"><span>解题思路</span></a></h2><figure><img src="https://i-blog.csdnimg.cn/direct/9fd6a4efed4b4ef4b63f174cde67a0a8.png#pic_center" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><img src="https://i-blog.csdnimg.cn/direct/6d3e83f0cfa241049c3281c73dace295.png" alt="" loading="lazy"><br> 作者：CRPB<br> 原文链接：<a href="https://blog.csdn.net/2302_79000266/article/details/144608856" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/2302_79000266/article/details/144608856</a><br> 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>📧:<a href="mailto:1563883475@qq.com" target="_blank" rel="noopener noreferrer">Click here to email to</a></p></blockquote><h2 id="code-1" tabindex="-1"><a class="header-anchor" href="#code-1"><span>CODE</span></a></h2><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//不能开 1e5+10, 内存限制比较严格</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> n<span class="token punctuation">,</span> r<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span></span>
<span class="line">    r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">5001</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为r最大可以取 10^9</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">;</span></span>
<span class="line">        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">;</span></span>
<span class="line">        s<span class="token punctuation">[</span><span class="token operator">++</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>y<span class="token punctuation">]</span> <span class="token operator">+=</span> w<span class="token punctuation">;</span> <span class="token comment">//右移一位, 就不需要考虑边界了, 并且必须是+=, 不能是=, 因为1个位置可能有多个目标</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5001</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> r<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> r<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> r<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,66)]))}const r=s(t,[["render",o]]),u=JSON.parse('{"path":"/Algo_note/%E3%80%90%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E3%80%912.%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C%E4%B9%A0%E9%A2%98.html","title":"【基础算法】2.二分与前缀和习题","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","cover":"https://img.picui.cn/free/2025/06/15/684eb82931fbc.jpg","footer":"<a href=https://www.gnu.org/licenses/gpl-3.0.html style=\\"color:#808080\\"> GPL-3.0 Licensed </a> | Copyright © 2025-present <a href=\\"https://github.com/GALA-Lin\\" style=\\"color:#808080\\">GALA-Lin</a>","copyright":false,"category":["基础算法学习笔记"],"tag":["习题","二分","前缀和"],"description":"【基础算法】2.二分与前缀和习题 [toc] 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 730. 机器人跳跃问题 - AcWing题库 题目描述 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【基础算法】2.二分与前缀和习题\\",\\"image\\":[\\"https://i-blog.csdnimg.cn/direct/ca0cbd08209a4c5495110ed254dcaee0.png\\",\\"https://i-blog.csdnimg.cn/direct/9fd6a4efed4b4ef4b63f174cde67a0a8.png#pic_center\\",\\"https://i-blog.csdnimg.cn/direct/6d3e83f0cfa241049c3281c73dace295.png\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-17T04:15:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GALA-Lin\\",\\"url\\":\\"https://gala-lin.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://gala-lin.github.io/Algo_note/%E3%80%90%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E3%80%912.%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C%E4%B9%A0%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"22lin04"}],["meta",{"property":"og:title","content":"【基础算法】2.二分与前缀和习题"}],["meta",{"property":"og:description","content":"【基础算法】2.二分与前缀和习题 [toc] 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 730. 机器人跳跃问题 - AcWing题库 题目描述 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://img.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T04:15:42.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://img.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"name":"twitter:image:alt","content":"【基础算法】2.二分与前缀和习题"}],["meta",{"property":"article:tag","content":"前缀和"}],["meta",{"property":"article:tag","content":"二分"}],["meta",{"property":"article:tag","content":"习题"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-17T04:15:42.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://gala-lin.github.io/zh/Algo_note/%E3%80%90%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E3%80%912.%E4%BA%8C%E5%88%86%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C%E4%B9%A0%E9%A2%98.html"}]]},"git":{"createdTime":1750082388000,"updatedTime":1750133742000,"contributors":[{"name":"Linsen HU","username":"","email":"1563883475@qq.com","commits":2}]},"readingTime":{"minutes":5.04,"words":1513},"filePathRelative":"Algo_note/【基础算法】2.二分与前缀和习题.md","excerpt":"\\n<p>[toc]</p>\\n<h2>系列文章</h2>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144505896\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】1.排序及二分</a></p>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144608856\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】2.高精度&amp;前缀和与差分</a></p>","autoDesc":true}');export{r as comp,u as data};
