import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as a,a as n,o as t}from"./app-BPeCR9gy.js";const o={};function l(c,s){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="算法设计与分析作业5" tabindex="-1"><a class="header-anchor" href="#算法设计与分析作业5"><span>算法设计与分析作业5</span></a></h1><h1 id="图像灰度压缩" tabindex="-1"><a class="header-anchor" href="#图像灰度压缩"><span>图像灰度压缩</span></a></h1><p>⼀幅4*4的图像, 灰度值序列如下.请根据课堂上所讲代码,写出构造解的S数组、l数组和b数组, 追踪解的S数组. 需要体现做题过程,如:每⼀轮i的循环写出内部j循环的前两次和最后两次, 内部循环少于等于四次的需要全部j的计算过程</p><figure><img src="https://img.picui.cn/free/2025/06/15/684ece6e2b1ed.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="构造阶段的b数组" tabindex="-1"><a class="header-anchor" href="#构造阶段的b数组"><span>构造阶段的b数组</span></a></h2><p>已知灰度值序列为 <code>10 9 12 40 50 35 15 12 8 10 9 15 11 130 160 240</code> ，共 <code>n = 16</code> 个元素。<br> 根据 <code>length</code> 函数：</p><ul><li><p><code>b[1] = length(10)</code>：</p><ul><li><code>i = 10 / 2 = 5</code> ， <code>k = 2</code> ；</li><li><code>i = 5 / 2 = 2</code> ， <code>k = 3</code> ；</li><li><code>i = 2 / 2 = 1</code> ， <code>k = 4</code> ；</li><li><code>i = 1 / 2 = 0</code> ，返回 <code>k = 4</code> 。</li></ul></li><li><p><code>b[2] = length(9)</code>：</p><ul><li><code>i = 9 / 2 = 4</code> ， <code>k = 2</code> ；</li><li><code>i = 4 / 2 = 2</code> ， <code>k = 3</code> ；</li><li><code>i = 2 / 2 = 1</code> ， <code>k = 4</code> ；</li><li><code>i = 1 / 2 = 0</code> ，返回 <code>k = 4</code> 。</li></ul></li><li><p><code>b[3] = length(12)</code>：</p><ul><li><code>i = 12 / 2 = 6</code> ， <code>k = 2</code> ；</li><li><code>i = 6 / 2 = 3</code> ， <code>k = 3</code> ；</li><li><code>i = 3 / 2 = 1</code> ， <code>k = 4</code> ；</li><li><code>i = 1 / 2 = 0</code> ，返回 <code>k = 4</code> 。</li></ul></li><li><p><code>b[4] = length(40)</code>:</p><ul><li><code>i = 40 / 2 = 20</code> ， <code>k = 2</code> ；</li><li><code>i = 20 / 2 = 10</code> ， <code>k = 3</code> ；</li><li><code>i = 10 / 2 = 5</code> ， <code>k = 4</code> ；</li><li><code>i = 5 / 2 = 2</code> ， <code>k = 5</code> ；</li><li><code>i = 2 / 2 = 1</code> ， <code>k = 6</code> ；</li><li><code>i = 1 / 2 = 0</code> ，返回 <code>k = 6</code> 。</li></ul></li><li><p><code>b[5] = length(50)</code>:</p><ul><li><p><code>i = 50 / 2 = 25</code> ， <code>k = 2</code> ；</p></li><li><p><code>i = 25 / 2 = 12</code> ， <code>k = 3</code> ；</p></li><li><p><code>i = 12 / 2 = 6</code> ， <code>k = 4</code> ；</p></li><li><p><code>i = 6 / 2 = 3</code> ， <code>k = 5</code> ；</p></li><li><p><code>i = 3 / 2 = 1</code> ， <code>k = 6</code> ；</p></li><li><p><code>i = 1 / 2 = 0</code> ，返回 <code>k = 6</code> 。</p></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li><p><code>b[16] = length(240)</code>:</p><ul><li><code>i = 240 / 2 = 120</code> ， <code>k = 2</code> ；</li><li><code>i = 120 / 2 = 60</code> ， <code>k = 3</code> ；</li><li><code>i = 60 / 2 = 30</code> ， <code>k = 4</code> ；</li><li><code>i = 30 / 2 = 15</code> ， <code>k = 5</code> ；</li><li><code>i = 15 / 2 = 7</code> ， <code>k = 6</code> ；</li><li><code>i = 7 / 2 = 3</code> ， <code>k = 7</code>;</li><li><code>i = 3 / 2 = 1</code> ， <code>k = 8</code>;</li><li><code>i = 1 / 2 = 0</code> ， 返回<code>k = 8</code>。</li></ul></li></ul><p>以此类推，计算出完整的 <code>b</code> 数组：<code>b = [0, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8]</code>，索引从<code>0</code>开始</p><h2 id="构造阶段的-s-数组和-l-数组" tabindex="-1"><a class="header-anchor" href="#构造阶段的-s-数组和-l-数组"><span>构造阶段的 <code>s</code> 数组和 <code>l</code> 数组</span></a></h2><p><strong>最终结果:</strong></p><p><code>s[]=15 19 23 35 41 47 53 59 65 71 77 82 86 105 113 121</code>，索引从1开始</p><p><code>l[]:1 2 3 4 5 6 7 8 9 10 11 6 7 1 2 3 </code>，索引从1开始</p><p><strong>步骤：</strong></p><p>初始化：<code>Lmax = 256</code> ， <code>header = 11</code> ， <code>s[0] = 0</code></p><ul><li><code>i=1</code>时，<code>b[i]=4</code>,<code>bmax=4</code>,<code>s[1]=s[0]+bmax=4;l[1]=1;s[1]+=header=15</code><ul><li><code>i=1&lt;j=2</code>不进入内层循环</li></ul></li></ul><p>+++</p><ul><li><code>i=2</code>时，<code>b[i]=4</code>,<code>bmax=4</code>,<code>s[2]=s[1]+bmax=19;l[2]=1</code><ul><li>j=2 <ul><li><code>bmax=4 == b[i-j+1]=b[1]=4</code> 不更新<code>bmax</code>,</li><li><code>s[2]=19 &gt; s[0] + j * bmax=0+2*4=8</code>,</li><li>所以<code>s[2]=s[0] + j * bmax=2*4=8</code>,<code>l[2]=2</code>,</li><li><code>s[2]+=header=19</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><code>i=3</code>时，<code>b[i]=4</code>,<code>bmax=4</code>,<code>s[3]=s[2]+bmax=19+4=23;l[3]=1</code><ul><li>j=2 <ul><li><code>bmax=4 == b[i-j+1]=b[2]=4</code>不更新<code>bmax</code>,</li><li><code>s[3]=23 == s[1] + j * bmax=15+2*4=23</code>,不更新<code>s[3]、l[3]</code></li></ul></li><li>j=3 <ul><li><code>bmax=4 == b[i-j+1]=b[1]=4</code>不更新<code>bmax</code>,</li><li><code>s[3]=23 &gt; s[0] + j * bmax=0+3*4=12</code>,</li><li>所以<code>s[3]=s[0] + j * bmax=3*4=12</code>,<code>l[3]=3</code></li><li><code>s[3]+=header=12+11=23</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><code>i=4</code>时，<code>b[i]=6</code>,<code>bmax=6</code>,<code>s[4]=s[3]+bmax=23+6=29;l[4]=1</code><ul><li>j=2 <ul><li><code>bmax=6 &gt; b[i-j+1]=b[3]=4</code>不更新<code>bmax</code>,</li><li><code>s[4]=29 &lt; s[2] + j * bmax=19+2*6=41</code>,不更新<code>s[4]、l[4]</code></li></ul></li><li>j=3 <ul><li><code>bmax=6 &gt; b[i-j+1]=b[2]=4</code>不更新<code>bmax</code>,</li><li><code>s[4]=29 &lt; s[1] + j * bmax=15+3*6=33</code>,</li><li>所以<code>s[4]=s[1] + j * bmax=33</code>,<code>l[4]=3</code></li></ul></li><li>j=4 <ul><li><code>bmax=6 &gt; b[i-j+1]=b[1]=4</code>不更新<code>bmax</code>,</li><li><code>s[4]=33 &gt; s[0] + j * bmax=0+4*6=24</code>,</li><li>所以<code>s[4]=s[0] + j * bmax=24,</code>l[4]=4\`</li><li><code>s[3]+=header=24+11=35</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 5</code>时，<code>b[5] = 6</code>,<code>bmax = 6</code>，<code>s[5] = s[4] + bmax = 35 + 6 = 41</code>，<code>l[5] = 1</code></p><ul><li><p>j = 2</p><ul><li><code>b[i - j + 1] = b[4] = 6</code> → <code>bmax = max(6, 6) = 6</code></li><li><code>s[i - j] + j * bmax = s[3] + 2 * 6 = 23 + 12 = 35</code></li><li>由于 <code>35 &lt; 41</code> → 更新 <code>s[5] = 35</code>，<code>l[5] = 2</code></li></ul></li><li><p>j = 3</p><ul><li><code>b[i - j + 1] = b[3] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[2] + 3 * 6 = 19 + 18 = 37</code></li><li>由于 <code>37 &gt; 35</code> → 不更新</li></ul></li><li><p>j = 4</p><ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 4 * 6 = 15 + 24 = 39</code></li><li>由于 <code>39 &gt; 35</code> → 不更新</li></ul></li><li><p>j = 5</p><ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 5 * 6 = 30</code></li><li>由于 <code>30 &lt; 35</code> → 更新 <code>s[5] = 30</code>，<code>l[5] = 5</code></li><li>\`\`s[5] = 30 + 11 = 41\`</li><li><code>l[5] = 5</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 6</code>时，<code>b[6] = 6\`\`bmax = 6</code>，<code>s[6] = s[5] + bmax = 41 + 6 = 47</code>，<code>l[6] = 1</code></p><ul><li>j = 2 <ul><li><code>b[i - j + 1] = b[5] = 6</code> → <code>bmax = max(6, 6) = 6</code></li><li><code>s[i - j] + j * bmax = s[4] + 2 * 6 = 35 + 12 = 47</code></li><li>由于 <code>47 == 47</code> → 不更新</li></ul></li><li>j = 3 <ul><li><code>b[i - j + 1] = b[4] = 6</code> → <code>bmax = max(6, 6) = 6</code></li><li><code>s[i - j] + j * bmax = s[3] + 3 * 6 = 23 + 18 = 41</code></li><li>由于 <code>41 &lt; 47</code> → 更新 <code>s[6] = 41</code>，<code>l[6] = 3</code></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li>j = 5 <ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 5 * 6 = 15 + 30 = 45</code></li><li>由于 <code>45 &gt; 41</code> → 不更新</li></ul></li><li>j = 6 <ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 6 * 6 = 36</code></li><li>由于 <code>36 &lt; 41</code> → 更新 <code>s[6] = 36</code>，<code>l[6] = 6</code></li><li><code>s[6] = 36 + 11 = 47</code></li><li><code>l[6] = 6</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 7</code>时，<code>b[7] = 4</code>，<code>bmax = 4</code>，<code>s[7] = s[6] + bmax = 47 + 4 = 51</code>，<code>l[7] = 1</code></p><ul><li>j = 2 <ul><li><code>b[i - j + 1] = b[6] = 6</code> → <code>bmax = max(4, 6) = 6</code></li><li><code>s[i - j] + j * bmax = s[5] + 2 * 6 = 41 + 12 = 53</code></li><li>由于 <code>53 &gt; 51</code> → 不更新</li></ul></li><li>j = 3 <ul><li><code>b[i - j + 1] = b[5] = 6</code> → <code>bmax = max(4, 6) = 6</code></li><li><code>s[i - j] + j * bmax = s[4] + 3 * 6 = 35 + 18 = 53</code></li><li>由于 <code>53 &gt; 51</code> → 不更新</li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li>j = 6 <ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 6 * 6 = 15 + 36 = 51</code></li><li>由于 <code>51 &gt; 47</code> → 不更新</li></ul></li><li>j = 7 <ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 7 * 6 = 42</code></li><li>由于 <code>42 &lt; 47</code> → 更新 <code>s[7] = 42</code>，<code>l[7] = 7</code></li><li><code>s[7] = 42 + 11 = 53</code></li><li><code>l[7] = 7</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 8</code>时，<code>b[8] = 4</code>，<code>bmax = 4</code>，<code>s[8] = s[7] + bmax = 53 + 4 = 57</code>，<code>l[8] = 1</code></p><ul><li>j = 2 <ul><li><code>b[i - j + 1] = b[7] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[6] + 2 * 4 = 47 + 8 = 55</code></li><li>由于 <code>55 &lt; 57</code> → 更新 <code>s[8] = 55</code>，<code>l[8] = 2</code></li></ul></li><li>j = 3 <ul><li><code>b[i - j + 1] = b[6] = 6</code> → <code>bmax = max(4, 6) = 6</code></li><li><code>s[i - j] + j * bmax = s[5] + 3 * 6 = 41 + 18 = 59</code></li><li>由于 <code>59 &gt; 55</code> → 不更新</li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li>j = 7 <ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 7 * 6 = 15 + 42 = 57</code></li><li>由于 <code>57 &gt; 53</code> → 不更新</li></ul></li><li>j = 8 <ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 8 * 6 = 48</code></li><li>由于 <code>48 &lt; 53</code> → 更新 <code>s[8] = 48</code>，<code>l[8] = 8</code></li><li><code>s[8] = 48 + 11 = 59</code></li><li><code>l[8] = 8</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 9</code>时<code>b[9] = 4</code>，<code>bmax = 4</code>，<code>s[9] = s[8] + bmax = 59 + 4 = 63</code>，<code>l[9] = 1</code></p><ul><li>j = 2 <ul><li><code>b[i - j + 1] = b[8] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[7] + 2 * 4 = 53 + 8 = 61</code></li><li>由于 <code>61 &lt; 63</code> → 更新 <code>s[9] = 61</code>，<code>l[9] = 2</code></li></ul></li><li>j = 3 <ul><li><code>b[i - j + 1] = b[7] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[6] + 3 * 4 = 47 + 12 = 59</code></li><li>由于 <code>59 &lt; 61</code> → 更新 <code>s[9] = 59</code>，<code>l[9] = 3</code></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li>j = 8 <ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 8 * 6 = 15 + 48 = 63</code></li><li>由于 <code>63 &gt; 59</code> → 不更新</li></ul></li><li>j = 9 <ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 9 * 6 = 54</code></li><li>由于 <code>54 &lt; 59</code> → 更新 <code>s[9] = 54</code>，<code>l[9] = 9</code></li><li><code>s[9] = 54 + 11 = 65</code></li><li><code>l[9] = 9</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 10</code>时，<code>b[10] = 4</code>，<code>bmax = 4</code>，<code>s[10] = s[9] + bmax = 65 + 4 = 69</code>，<code>l[10] = 1</code></p><ul><li><p>j = 2</p><ul><li><code>b[i - j + 1] = b[9] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[8] + 2 * 4 = 59 + 8 = 67</code></li><li>由于 <code>67 &lt; 69</code> → 更新 <code>s[10] = 67</code>，<code>l[10] = 2</code></li></ul></li><li><p>j = 3</p><ul><li><code>b[i - j + 1] = b[8] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[7] + 3 * 4 = 53 + 12 = 65</code></li><li>由于 <code>65 &lt; 67</code> → 更新 <code>s[10] = 65</code>，<code>l[10] = 3</code></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li><p>j = 9</p><ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 9 * 6 = 15 + 54 = 69</code></li><li>由于 <code>69 &gt; 63</code> → 不更新</li></ul></li><li><p>j = 10</p><ul><li><p><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></p></li><li><p><code>s[i - j] + j * bmax = s[0] + 10 * 6 = 60</code></p></li><li><p>由于 <code>60 &lt; 63</code> → 更新 <code>s[10] = 60</code>，\`l[10] = 10\`\`</p></li><li><p><code>s[10] = 60 + 11 = 71</code></p></li><li><p><code>l[10] = 10</code></p></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 11</code>时,<code>b[11] = 4</code>，<code>bmax = 4</code>，<code>s[11] = s[10] + bmax = 71 + 4 = 75</code>，<code>l[11] = 1</code></p><ul><li>j = 2 <ul><li><code>b[i - j + 1] = b[10] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[9] + 2 * 4 = 65 + 8 = 73</code></li><li>由于 <code>73 &lt; 75</code> → 更新 <code>s[11] = 73</code>，<code>l[11] = 2</code></li></ul></li><li>j = 3 <ul><li><code>b[i - j + 1] = b[9] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[8] + 3 * 4 = 59 + 12 = 71</code></li><li>由于 <code>71 &lt; 73</code> → 更新 <code>s[11] = 71</code>，<code>l[11] = 3</code></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li>j = 10 <ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 10 * 6 = 15 + 60 = 75</code></li><li>由于 <code>75 &gt; 67</code> → 不更新</li></ul></li><li>j = 11 <ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 11 * 6 = 66</code></li><li>由于 <code>66 &lt; 67</code> → 更新 <code>s[11] = 66</code>，<code>l[11] = 11</code></li><li><code>s[11] = 66 + 11 = 77</code></li><li><code>l[11] = 11</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 12</code>时，<code>b[12] = 4</code>，<code>bmax = 4</code>，<code>s[12] = s[11] + bmax = 77 + 4 = 81</code>，<code>l[12] = 1</code></p><ul><li>j = 2 <ul><li><code>b[i - j + 1] = b[11] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[10] + 2 * 4 = 71 + 8 = 79</code></li><li>由于 <code>79 &lt; 81</code> → 更新 <code>s[12] = 79</code>，<code>l[12] = 2</code></li></ul></li><li>j = 3 <ul><li><code>b[i - j + 1] = b[10] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[9] + 3 * 4 = 65 + 12 = 77</code></li><li>由于 <code>77 &lt; 79</code> → 更新 <code>s[12] = 77</code>，<code>l[12] = 3</code></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li>j = 11 <ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 11 * 6 = 15 + 66 = 81</code></li><li>由于 <code>81 &gt; 71</code> → 不更新</li></ul></li><li>j = 12 <ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[0] + 12 * 6 = 72</code></li><li>由于 <code>72 &gt; 71</code> → 不更新</li><li><code>s[12] = 71 + 11 = 82</code></li><li><code>l[12] = 6</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i=13</code>时，<code>b[13] = 4</code>，<code>bmax = 4</code>，<code>s[13] = s[12] + bmax = 82 + 4 = 86</code>,<code>l[13] = 1</code></p><ul><li><p>j = 2</p><ul><li><code>b[i - j + 1] = b[12] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[11] + 2 * 4 = 77 + 8 = 85</code></li><li>由于 <code>85 &lt; 86</code> → 更新 <code>s[13] = 85</code>，<code>l[13] = 2</code></li></ul></li><li><p>j = 3</p><ul><li><code>b[i - j + 1] = b[11] = 4</code> → <code>bmax = max(4, 4) = 4</code></li><li><code>s[i - j] + j * bmax = s[10] + 3 * 4 = 71 + 12 = 83</code></li><li>由于 <code>83 &lt; 85</code> → 更新 <code>s[13] = 83</code>，<code>l[13] = 3</code></li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li><p>j = 12</p><ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(6, 4) = 6</code></li><li><code>s[i - j] + j * bmax = s[1] + 12 * 6 = 15 + 72 = 87</code></li><li>由于 <code>87 &gt; 75</code> → 不更新</li></ul></li><li><p>j = 13</p><ul><li><p><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(6, 4) = 6</code></p></li><li><p><code>s[i - j] + j * bmax = s[0] + 13 * 6 = 78</code></p></li><li><p>由于 <code>78 &gt; 75</code> → 不更新</p></li><li><p><code>s[13] = 75 + 11 = 86</code></p></li><li><p><code>l[13] = 7</code></p></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i=14</code>时，<code>b[14] = 8</code>，<code>bmax = 8</code>，<code>s[14] = s[13] + bmax = 86 + 8 = 94</code>，<code>l[14] = 1</code></p><ul><li><p>j = 2</p><ul><li><code>b[i - j + 1] = b[13] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[12] + 2 * 8 = 82 + 16 = 98</code></li><li>由于 <code>98 &gt; 94</code> → 不更新</li></ul></li><li><p>j = 3</p><ul><li><code>b[i - j + 1] = b[12] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[11] + 3 * 8 = 77 + 24 = 101</code></li><li>由于 <code>101 &gt; 94</code> → 不更新</li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li><p>j = 13</p><ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[1] + 13 * 8 = 15 + 104 = 119</code></li><li>由于 <code>119 &gt; 94</code> → 不更新</li></ul></li><li><p>j = 14</p><ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[0] + 14 * 8 = 112</code></li><li>由于 <code>112 &gt; 94</code> → 不更新</li><li><code>s[14] = 94 + 11 = 105</code></li><li><code>l[14] = 1</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><p><code>i = 15</code>时，<code>b[15] = 8</code>，<code>bmax = 8</code>，<code>s[15] = s[14] + bmax = 105 + 8 = 113</code>，<code>l[15] = 1</code></p><ul><li><p>j = 2</p><ul><li><code>b[i - j + 1] = b[14] = 8</code> → <code>bmax = max(8, 8) = 8</code></li><li><code>s[i - j] + j * bmax = s[13] + 2 * 8 = 86 + 16 = 102</code></li><li>由于 <code>102 &lt; 113</code> → 更新 <code>s[15] = 102</code>，<code>l[15] = 2</code></li></ul></li><li><p>j = 3</p><ul><li><code>b[i - j + 1] = b[13] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[12] + 3 * 8 = 82 + 24 = 106</code></li><li>由于 <code>106 &gt; 102</code> → 不更新</li></ul></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...... </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">......</span></span></span></span></span></p><ul><li><p>j = 14</p><ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[1] + 14 * 8 = 15 + 112 = 127</code></li><li>由于 <code>127 &gt; 102</code> → 不更新</li></ul></li><li><p>j = 15</p><ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[0] + 15 * 8 = 120</code></li><li>由于 <code>120 &gt; 102</code> → 不更新</li><li><code>s[15] = 102 + 11 = 113</code></li><li><code>l[15] = 2</code></li></ul></li></ul></li></ul><p>+++</p><ul><li><code>i=16</code>时，<code>b[16] = 8</code>,<code>bmax = 8</code>，<code>s[16] = s[15] + bmax = 113 + 8 = 121</code>，<code>l[16] = 1</code><ul><li><p>j = 2</p><ul><li><code>b[i - j + 1] = b[15] = 8</code> → <code>bmax = max(8, 8) = 8</code></li><li><code>s[i - j] + j * bmax = s[14] + 2 * 8 = 105 + 16 = 121</code></li><li>由于 <code>121 == 121</code> → 不更新</li></ul></li><li><p>j = 3</p><ul><li><code>b[i - j + 1] = b[14] = 8</code> → <code>bmax = max(8, 8) = 8</code></li><li><code>s[i - j] + j * bmax = s[13] + 3 * 8 = 86 + 24 = 110</code></li><li>由于 <code>110 &lt; 121</code> → 更新 <code>s[16] = 110</code>，<code>l[16] = 3</code></li></ul></li><li><p>j = 15</p><ul><li><code>b[i - j + 1] = b[2] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[1] + 15 * 8 = 15 + 120 = 135</code></li><li>由于 <code>135 &gt; 110</code> → 不更新</li></ul></li><li><p>j = 16</p><ul><li><code>b[i - j + 1] = b[1] = 4</code> → <code>bmax = max(8, 4) = 8</code></li><li><code>s[i - j] + j * bmax = s[0] + 16 * 8 = 128</code></li><li>由于 <code>128 &gt; 110</code> → 不更新</li><li><code>s[16] = 110 + 11 = 121</code></li><li><code>l[16] = 3</code></li></ul></li></ul></li></ul><h2 id="追踪解的s数组" tabindex="-1"><a class="header-anchor" href="#追踪解的s数组"><span>追踪解的s数组</span></a></h2><p><strong>已知结果</strong></p><ul><li><code>l</code> 数组：<code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 6, 7, 1, 2, 3]</code></li></ul><p><strong>计算过程</strong></p><p>从 <code>n = 16</code> 开始调用 <code>Traceback</code> 函数：</p><ol><li><strong>初始调用</strong>：<code>Traceback(16, i, s, l)</code><ul><li>递归调用：<code>Traceback(16 - l[16], i, s, l)</code> → <code>Traceback(13, i, s, l)</code></li><li>记录：<code>s[i++] = 13</code></li></ul></li><li><strong>递归调用</strong>：<code>Traceback(13, i, s, l)</code><ul><li>递归调用：<code>Traceback(13 - l[13], i, s, l)</code> → <code>Traceback(6, i, s, l)</code></li><li>记录：<code>s[i++] = 6</code></li></ul></li><li><strong>递归调用</strong>：<code>Traceback(6, i, s, l)</code><ul><li>递归调用：<code>Traceback(6 - l[6], i, s, l)</code> → <code>Traceback(0, i, s, l)</code></li><li>记录：<code>s[i++] = 0</code></li></ul></li><li><strong>终止条件</strong>：<code>n == 0</code>，返回</li></ol><p><strong>追踪解的 S 数组</strong></p><p>最终 <code>s</code> 数组存储的是每个分段的起始位置（按调用顺序逆序记录）：</p><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code class="language-plaintext"><span class="line">s = [0, 6, 13]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>结果解释</strong></p><ul><li><code>s[0] = 0</code>：第一个分段从像素 1 开始（0 是前一个位置）</li><li><code>s[1] = 6</code>：第二个分段从像素 7 开始（6 是前一个位置）</li><li><code>s[2] = 13</code>：第三个分段从像素 14 开始（13 是前一个位置）</li></ul><p><strong>验证分段方案</strong></p><ul><li><strong>分段 1</strong>：像素 1-6（长度 6，<code>bmax = 6</code>）</li><li><strong>分段 2</strong>：像素 7-13（长度 7，<code>bmax = 4</code>）</li><li><strong>分段 3</strong>：像素 14-16（长度 3，<code>bmax = 8</code>）</li></ul><h2 id="code" tabindex="-1"><a class="header-anchor" href="#code"><span>Code</span></a></h2><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 计算整数的二进制位数</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    i <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        k<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        i <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> k<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 图像压缩函数</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">Compress</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> Lmax <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> bmax <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> bmax<span class="token punctuation">;</span></span>
<span class="line">        l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> Lmax<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>bmax <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                bmax <span class="token operator">=</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> j <span class="token operator">*</span> bmax<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">{</span></span>
<span class="line">                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> j <span class="token operator">*</span> bmax<span class="token punctuation">;</span></span>
<span class="line">                l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> header<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 回溯函数，确定最优分段</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">Traceback</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">Traceback</span><span class="token punctuation">(</span>n <span class="token operator">-</span> l<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n <span class="token operator">-</span> l<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出压缩结果</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">Output</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;图像压缩后的最小空间为: &quot;</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">Traceback</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;将原灰度序列分成&quot;</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;段序列段&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;段&quot;</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: 长度=&quot;</span> <span class="token operator">&lt;&lt;</span> l<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, 存储位数=&quot;</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 示例灰度值序列 (4x4 图像)</span></span>
<span class="line">    <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment">// 图像像素数</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化数组</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token operator">*</span>l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 执行压缩</span></span>
<span class="line">    <span class="token function">Compress</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 输出b,s,l数组</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b数组:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;s数组:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;l数组:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> l<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 输出结果</span></span>
<span class="line">    <span class="token function">Output</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 释放内存</span></span>
<span class="line">    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> l<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="out-put" tabindex="-1"><a class="header-anchor" href="#out-put"><span>Out Put</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">b数组:</span>
<span class="line">4 4 4 6 6 6 4 4 4 4 4 4 4 8 8 8 </span>
<span class="line">s数组:</span>
<span class="line">15 19 23 35 41 47 53 59 65 71 77 82 86 105 113 121 </span>
<span class="line">l数组:</span>
<span class="line">1 2 3 4 5 6 7 8 9 10 11 6 7 1 2 3 </span>
<span class="line">图像压缩后的最小空间为: 121</span>
<span class="line">将原灰度序列分成3段序列段</span>
<span class="line">段1: 长度=6, 存储位数=6</span>
<span class="line">段2: 长度=7, 存储位数=4</span>
<span class="line">段3: 长度=3, 存储位数=8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最终分段" tabindex="-1"><a class="header-anchor" href="#最终分段"><span>最终分段</span></a></h2><ul><li>段 1：像素 1-6（长度 6，b=6）</li><li>段 2：像素 7-13（长度 7，b=4）</li><li>段 3：像素 14-16（长度 3，b=8）</li></ul><p><strong>总位数</strong>：每段头信息11位</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>6</mn><mo>×</mo><mn>6</mn><mo>+</mo><mn>7</mn><mo>×</mo><mn>4</mn><mo>+</mo><mn>3</mn><mo>×</mo><mn>8</mn><mo stretchy="false">)</mo><mo>+</mo><mn>3</mn><mo>×</mo><mn>11</mn><mo>=</mo><mn>121</mn><mtext> </mtext><mtext>位</mtext></mrow><annotation encoding="application/x-tex">(6 \\times 6 + 7 \\times 4 + 3 \\times 8) + 3 \\times 11 = 121 \\, \\text{位} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">121</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord cjk_fallback">位</span></span></span></span></span></span></p><h1 id="最小生成树" tabindex="-1"><a class="header-anchor" href="#最小生成树"><span>最小生成树</span></a></h1><p><strong>在ABCDE各城市间建立通信网络,分别用Prim算法和Kruskal算法构造最小生成树</strong></p><figure><img src="https://img.picui.cn/free/2025/06/15/684ece6eb99f9.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="一、prim算法-以顶点a为起点" tabindex="-1"><a class="header-anchor" href="#一、prim算法-以顶点a为起点"><span>一、Prim算法（以顶点A为起点）</span></a></h2><ol><li><p><strong>初始化</strong>：</p><ul><li>已选顶点 ( U = {A} )，未选顶点 ( V-U = {B,C,D,E} )。</li><li>距离数组：<code>dist[B]=25</code>，<code>dist[C]=5</code>，<code>dist[D]=25</code>，<code>dist[E]=45</code>。</li></ul></li><li><p><strong>迭代选择最近顶点</strong>：</p><ul><li><strong>第1次</strong>：选C（<code>dist[C]=5</code>），更新 <code>dist[B]=7</code>（C-B）、<code>dist[D]=44</code>（C-D）、<code>dist[E]=34</code>（C-E）。</li><li><strong>第2次</strong>：选B（<code>dist[B]=7</code>），更新 <code>dist[D]=11</code>（B-D）、<code>dist[E]=12</code>（B-E）。</li><li><strong>第3次</strong>：选D（<code>dist[D]=11</code>），无需更新E（B-E已更优）。</li><li><strong>第4次</strong>：选E（<code>dist[E]=12</code>），结束。</li></ul></li><li><p><strong>生成树边</strong>：A-C（5）、C-B（7）、B-D（11）、B-E（12），权和 <strong>35</strong>。</p></li></ol><h3 id="表格表述" tabindex="-1"><a class="header-anchor" href="#表格表述"><span>表格表述</span></a></h3>`,74),n("table",null,[n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"center"}},"迭代次数"),n("th",{style:{"text-align":"center"}},"已选顶点集合"),n("th",{style:{"text-align":"center"}},"A"),n("th",{style:{"text-align":"center"}},"B"),n("th",{style:{"text-align":"center"}},"C"),n("th",{style:{"text-align":"center"}},"D"),n("th",{style:{"text-align":"center"}},"E"),n("th",{style:{"text-align":"center"}},"新添加边")])]),n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"center"}},"1"),n("td",{style:{"text-align":"center"},A:""}),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"25"),n("td",{style:{"text-align":"center"}},"5*"),n("td",{style:{"text-align":"center"}},"25"),n("td",{style:{"text-align":"center"}},"45"),n("td",{style:{"text-align":"center"}},"A-C")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"2"),n("td",{style:{"text-align":"center"},"A,":"",C:""}),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"7*"),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"44"),n("td",{style:{"text-align":"center"}},"34"),n("td",{style:{"text-align":"center"}},"C-B")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"3"),n("td",{style:{"text-align":"center"},"A,":"","C,":"",B:""}),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"11*"),n("td",{style:{"text-align":"center"}},"12*"),n("td",{style:{"text-align":"center"}},"B-D")]),n("tr",null,[n("td",{style:{"text-align":"center"}},"4"),n("td",{style:{"text-align":"center"},"A,":"","C,":"","B,":"",D:""}),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"-"),n("td",{style:{"text-align":"center"}},"78"),n("td",{style:{"text-align":"center"}},"B-E")])])],-1),a(`<h2 id="二、kruskal算法" tabindex="-1"><a class="header-anchor" href="#二、kruskal算法"><span>二、Kruskal算法</span></a></h2><ol><li><p><strong>排序边（升序）</strong>： 5（A-C）、7（C-B）、11（B-D）、12（B-E）、25（A-B）......</p></li><li><p><strong>并查集合并</strong>：</p><ul><li>选A-C（5）：合并{A,C}。</li><li>选C-B（7）：合并{A,C,B}。</li><li>选B-D（11）：合并{A,C,B,D}。</li><li>选B-E（12）：合并所有顶点，结束。</li></ul></li><li><p><strong>生成树边</strong>：同Prim算法，权和 <strong>35</strong>。</p></li></ol><h2 id="三、结果验证" tabindex="-1"><a class="header-anchor" href="#三、结果验证"><span>三、结果验证</span></a></h2><ul><li>两种算法均得到最小生成树，边为 <strong>A-C（5）、C-B（7）、B-D（11）、B-E（12）</strong>，权值和 <strong>35</strong>，无环且连接所有顶点，符合最小生成树定义。</li></ul><p><strong>答案：</strong></p><ul><li><strong>Prim算法</strong>：按上述步骤选择边，最终生成树边为A-C、C-B、B-D、B-E，权和35。</li><li><strong>Kruskal算法</strong>：排序边后依次选择无环边，最终生成树边同上，权和35。</li></ul><h1 id="四、code" tabindex="-1"><a class="header-anchor" href="#四、code"><span>四、Code</span></a></h1><h2 id="_4-1-prime" tabindex="-1"><a class="header-anchor" href="#_4-1-prime"><span>4.1 Prime</span></a></h2><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Prim算法构造最小生成树</span></span>
<span class="line">vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> graph<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">visited</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录顶点是否已被加入生成树</span></span>
<span class="line">    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">minDist</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> INF<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个顶点到生成树的最短距离</span></span>
<span class="line">    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">parent</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录每个顶点的父节点</span></span>
<span class="line">    minDist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 从顶点0开始</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 优先队列，按距离最小的顺序弹出</span></span>
<span class="line">    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> pq<span class="token punctuation">;</span></span>
<span class="line">    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 起始顶点</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> u <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// 当前顶点</span></span>
<span class="line">        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 如果顶点已被访问，跳过</span></span>
<span class="line">        visited<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 遍历与顶点u相邻的顶点</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果顶点v未被访问且有边</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minDist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    minDist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> graph<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                    parent<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span></span>
<span class="line">                    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>minDist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 构造生成树的边</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> mst<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        mst<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> mst<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义图的邻接矩阵</span></span>
<span class="line">    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">graph</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// A-B: 25</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// A-C: 5</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">// A-D: 25</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span> <span class="token comment">// A-E: 45</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// B-C: 7</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// B-D: 11</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">// B-E: 12</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">44</span><span class="token punctuation">;</span> <span class="token comment">// C-D: 44</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span> <span class="token comment">// C-E: 34</span></span>
<span class="line">    graph<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span> graph<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span> <span class="token comment">// D-E: 78</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用Prim算法构造最小生成树</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> mst <span class="token operator">=</span> <span class="token function">prim</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> graph<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 输出最小生成树的边</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Prim算法构造的最小生成树：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> mst<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Prim算法构造的最小生成树：</span>
<span class="line">C-B</span>
<span class="line">A-C</span>
<span class="line">B-D</span>
<span class="line">B-E</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-kruskal" tabindex="-1"><a class="header-anchor" href="#_4-2-kruskal"><span>4.2 Kruskal</span></a></h2><div class="language-cpp line-numbers-mode has-collapsed-lines collapsed" data-highlighter="prismjs" data-ext="cpp" style="--vp-collapsed-lines:15;"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 并查集（Union-Find）结构</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> parent<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        parent<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">unionSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> rootX <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> rootY <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">!=</span> rootY<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            parent<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">=</span> rootY<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 每条边的结构</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Edge</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> weight<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">u</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">v</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">weight</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Kruskal算法构造最小生成树</span></span>
<span class="line">vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Edge<span class="token operator">&gt;</span><span class="token operator">&amp;</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> edges<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Edge<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Edge<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> a<span class="token punctuation">.</span>weight <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>weight<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    UnionFind <span class="token function">uf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> mst<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> rootU <span class="token operator">=</span> uf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> rootV <span class="token operator">=</span> uf<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootU <span class="token operator">!=</span> rootV<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            uf<span class="token punctuation">.</span><span class="token function">unionSet</span><span class="token punctuation">(</span>rootU<span class="token punctuation">,</span> rootV<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            mst<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span>u<span class="token punctuation">,</span> edge<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> mst<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义图的边</span></span>
<span class="line">    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>Edge<span class="token operator">&gt;</span> edges <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 使用Kruskal算法构造最小生成树</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> mst <span class="token operator">=</span> <span class="token function">kruskal</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> edges<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 输出最小生成树的边</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Kruskal算法构造的最小生成树：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> mst<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> edge<span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="输出-1" tabindex="-1"><a class="header-anchor" href="#输出-1"><span>输出</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">Kruskal算法构造的最小生成树：</span>
<span class="line">A-C</span>
<span class="line">B-C</span>
<span class="line">B-D</span>
<span class="line">B-E</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算法输出边均为 A-C（5）、C-B（7）、B-D（11）、B-E（12），权值和 35</p>`,16)]))}const d=p(o,[["render",l]]),r=JSON.parse('{"path":"/zh/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E8%AF%BE%E7%A8%8B%E6%94%BB%E7%95%A5/homework5.html","title":"算法设计与分析作业5","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-05-28T00:00:00.000Z","cover":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg","footer":"<a href=https://www.gnu.org/licenses/gpl-3.0.html style=\\"color:#808080\\"> GPL-3.0 Licensed </a> | Copyright © 2025-present <a href=\\"https://github.com/GALA-Lin\\" style=\\"color:#808080\\">GALA-Lin</a>","copyright":false,"star":true,"category":["算法设计与分析作业"],"tag":["图像压缩","最小生成树"],"description":"算法设计与分析作业5 图像灰度压缩 ⼀幅4*4的图像, 灰度值序列如下.请根据课堂上所讲代码,写出构造解的S数组、l数组和b数组, 追踪解的S数组. 需要体现做题过程,如:每⼀轮i的循环写出内部j循环的前两次和最后两次, 内部循环少于等于四次的需要全部j的计算过程 构造阶段的b数组 已知灰度值序列为 10 9 12 40 50 35 15 12 8 1...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法设计与分析作业5\\",\\"image\\":[\\"https://img.picui.cn/free/2025/06/15/684ece6e2b1ed.png\\",\\"https://img.picui.cn/free/2025/06/15/684ece6eb99f9.png\\"],\\"datePublished\\":\\"2025-05-28T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-20T13:16:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GALA-Lin\\",\\"url\\":\\"https://gala-lin.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://gala-lin.github.io/zh/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E8%AF%BE%E7%A8%8B%E6%94%BB%E7%95%A5/homework5.html"}],["meta",{"property":"og:site_name","content":"22lin04"}],["meta",{"property":"og:title","content":"算法设计与分析作业5"}],["meta",{"property":"og:description","content":"算法设计与分析作业5 图像灰度压缩 ⼀幅4*4的图像, 灰度值序列如下.请根据课堂上所讲代码,写出构造解的S数组、l数组和b数组, 追踪解的S数组. 需要体现做题过程,如:每⼀轮i的循环写出内部j循环的前两次和最后两次, 内部循环少于等于四次的需要全部j的计算过程 构造阶段的b数组 已知灰度值序列为 10 9 12 40 50 35 15 12 8 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-20T13:16:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"name":"twitter:image:alt","content":"算法设计与分析作业5"}],["meta",{"property":"article:tag","content":"最小生成树"}],["meta",{"property":"article:tag","content":"图像压缩"}],["meta",{"property":"article:published_time","content":"2025-05-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-20T13:16:13.000Z"}]]},"git":{"createdTime":1749942657000,"updatedTime":1753017373000,"contributors":[{"name":"Linsen HU","username":"","email":"1563883475@qq.com","commits":6},{"name":"GALA-Lin","username":"GALA-Lin","email":"140772868+GALA-Lin@users.noreply.github.com","commits":1,"url":"https://github.com/GALA-Lin"}]},"readingTime":{"minutes":16.83,"words":5050},"filePathRelative":"zh/算法设计与分析课程攻略/homework5.md","excerpt":"\\n<h1>图像灰度压缩</h1>\\n<p>⼀幅4*4的图像, 灰度值序列如下.请根据课堂上所讲代码,写出构造解的S数组、l数组和b数组, 追踪解的S数组. 需要体现做题过程,如:每⼀轮i的循环写出内部j循环的前两次和最后两次, 内部循环少于等于四次的需要全部j的计算过程</p>\\n<figure><img src=\\"https://img.picui.cn/free/2025/06/15/684ece6e2b1ed.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h2>构造阶段的b数组</h2>","autoDesc":true}');export{d as comp,r as data};
