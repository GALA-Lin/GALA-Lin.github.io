import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as s,o as t}from"./app-CJ9_XmDJ.js";const p={};function r(o,n){return t(),a("div",null,n[0]||(n[0]=[s(`<h1 id="【数据结构】1-链表" tabindex="-1"><a class="header-anchor" href="#【数据结构】1-链表"><span>【数据结构】1.链表</span></a></h1><p>[toc]</p><h2 id="系列文章" tabindex="-1"><a class="header-anchor" href="#系列文章"><span>系列文章</span></a></h2><p><a href="https://blog.csdn.net/2302_79000266/article/details/144505896" target="_blank" rel="noopener noreferrer">【基础算法】1.排序及二分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144608856" target="_blank" rel="noopener noreferrer">【基础算法】2.高精度&amp;前缀和与差分</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144634985" target="_blank" rel="noopener noreferrer">【基础算法】3.双指针、位运算、离散化、区间合并</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/144653279" target="_blank" rel="noopener noreferrer">【数据结构】1.链表</a></p><p><a href="https://blog.csdn.net/2302_79000266/article/details/145040073?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=145040073&amp;sharerefer=PC&amp;sharesource=2302_79000266&amp;sharefrom=from_link" target="_blank" rel="noopener noreferrer">【基础算法】习题课1</a></p><h2 id="系列代码" tabindex="-1"><a class="header-anchor" href="#系列代码"><span>系列代码</span></a></h2><p><a href="https://github.com/GALA-Lin/Algorithm" target="_blank" rel="noopener noreferrer">GALA-Lin/Algorithm: CSDN基础算法系列配套代码</a></p><h1 id="一、链表" tabindex="-1"><a class="header-anchor" href="#一、链表"><span>一、链表</span></a></h1><h2 id="void-resverse" tabindex="-1"><a class="header-anchor" href="#void-resverse"><span>void resverse()</span></a></h2><ol><li><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">Node<span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">Node<span class="token operator">*</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span></span>
<span class="line">Node<span class="token operator">*</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>prev</code>：用于存储链表中当前节点的前一个节点。初始值为<code>NULL</code>，因为链表的最后一个节点的<code>next</code>指针应该指向<code>NULL</code>。</li><li><code>current</code>：指向链表的头节点<code>head</code>，开始时从头节点开始反转。</li><li><code>next</code>：用于存储链表中当前节点的下一个节点。初始值为<code>NULL</code>。</li></ul></li><li><p><strong>遍历链表并反转每个节点的<code>next</code>指针</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    next <span class="token operator">=</span> current<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 保存当前节点的下一个节点</span></span>
<span class="line">    current<span class="token operator">-&gt;</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span> <span class="token comment">// 将当前节点的next指针指向prev，实现反转</span></span>
<span class="line">    prev <span class="token operator">=</span> current<span class="token punctuation">;</span>         <span class="token comment">// 将prev移动到当前节点</span></span>
<span class="line">    current <span class="token operator">=</span> next<span class="token punctuation">;</span>       <span class="token comment">// 将current移动到下一个节点</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个循环会一直执行，直到<code>current</code>指针变为<code>NULL</code>（即遍历到链表的末尾）。</li><li>在每次循环中，首先保存当前节点的下一个节点到<code>next</code>，然后将当前节点的<code>next</code>指针指向<code>prev</code>，接着将<code>prev</code>和<code>current</code>指针依次向后移动一个节点。</li></ul></li><li><p><strong>更新头节点</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">head <span class="token operator">=</span> prev<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>当循环结束后，<code>prev</code>指针会指向原本链表的最后一个节点，这是反转后的新头节点。因此，将<code>head</code>指针更新为<code>prev</code>，完成链表的反转。<br><strong>完整代码：</strong></li></ul></li></ol><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">    <span class="token keyword">void</span> <span class="token function">resverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        Node<span class="token operator">*</span> prev<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        Node<span class="token operator">*</span> current<span class="token operator">=</span>head<span class="token punctuation">;</span></span>
<span class="line">        Node<span class="token operator">*</span> next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            next<span class="token operator">=</span>current<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span></span>
<span class="line">            current<span class="token operator">-&gt;</span>next<span class="token operator">=</span>prev<span class="token punctuation">;</span></span>
<span class="line">            prev<span class="token operator">=</span>current<span class="token punctuation">;</span></span>
<span class="line">            current<span class="token operator">=</span>next<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        head<span class="token operator">=</span>prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、数组实现链表" tabindex="-1"><a class="header-anchor" href="#二、数组实现链表"><span>二、数组实现链表</span></a></h1>`,15)]))}const i=e(p,[["render",r]]),d=JSON.parse('{"path":"/Algo_note/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%911.%E9%93%BE%E8%A1%A8.html","title":"【数据结构】1.链表","lang":"en-US","frontmatter":{"icon":"pen-to-square","date":"2025-04-23T00:00:00.000Z","cover":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg","footer":"<a href=https://www.gnu.org/licenses/gpl-3.0.html style=\\"color:#808080\\"> GPL-3.0 Licensed </a> | Copyright © 2025-present <a href=\\"https://github.com/GALA-Lin\\" style=\\"color:#808080\\">GALA-Lin</a>","copyright":false,"category":["基础算法学习笔记"],"tag":["数据结构","链表"],"description":"【数据结构】1.链表 [toc] 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 一、链表 void resverse() prev：用于存储链表中当前...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【数据结构】1.链表\\",\\"image\\":[\\"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg\\"],\\"datePublished\\":\\"2025-04-23T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-20T13:16:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GALA-Lin\\",\\"url\\":\\"https://gala-lin.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://gala-lin.github.io/Algo_note/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%911.%E9%93%BE%E8%A1%A8.html"}],["meta",{"property":"og:site_name","content":"22lin04"}],["meta",{"property":"og:title","content":"【数据结构】1.链表"}],["meta",{"property":"og:description","content":"【数据结构】1.链表 [toc] 系列文章 【基础算法】1.排序及二分 【基础算法】2.高精度&前缀和与差分 【基础算法】3.双指针、位运算、离散化、区间合并 【数据结构】1.链表 【基础算法】习题课1 系列代码 GALA-Lin/Algorithm: CSDN基础算法系列配套代码 一、链表 void resverse() prev：用于存储链表中当前..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-20T13:16:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://free.picui.cn/free/2025/06/15/684eb82931fbc.jpg"}],["meta",{"name":"twitter:image:alt","content":"【数据结构】1.链表"}],["meta",{"property":"article:tag","content":"链表"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2025-04-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-20T13:16:13.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://gala-lin.github.io/zh/Algo_note/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%911.%E9%93%BE%E8%A1%A8.html"}]]},"git":{"createdTime":1750082388000,"updatedTime":1753017373000,"contributors":[{"name":"Linsen HU","username":"","email":"1563883475@qq.com","commits":2},{"name":"GALA-Lin","username":"GALA-Lin","email":"140772868+GALA-Lin@users.noreply.github.com","commits":1,"url":"https://github.com/GALA-Lin"}]},"readingTime":{"minutes":1.76,"words":528},"filePathRelative":"Algo_note/【数据结构】1.链表.md","excerpt":"\\n<p>[toc]</p>\\n<h2>系列文章</h2>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144505896\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】1.排序及二分</a></p>\\n<p><a href=\\"https://blog.csdn.net/2302_79000266/article/details/144608856\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">【基础算法】2.高精度&amp;前缀和与差分</a></p>","autoDesc":true}');export{i as comp,d as data};
